#!/bin/bash

echo "üîß Solucionando problema de conexi√≥n Frontend-Backend..."
echo "=================================================="

# 1. Verificar y configurar .env
echo "üìù 1. Verificando archivo .env..."
if [ ! -f .env ]; then
    echo "   ‚ùå Archivo .env no existe. Creando desde env.example..."
    cp env.example .env
    echo "   ‚úÖ Archivo .env creado desde env.example"
    echo "   üö® IMPORTANTE: Debes completar tus API keys en .env"
else
    echo "   ‚úÖ Archivo .env ya existe"
fi

# Solo cambiar la l√≠nea DATABASE_URL sin sobrescribir el archivo
echo "üìù 2. Configurando base de datos para SQLite..."
if grep -q "DATABASE_URL=postgresql" .env; then
    sed -i '' 's|DATABASE_URL=postgresql.*|DATABASE_URL=sqlite+aiosqlite:///./app.db|' .env
    echo "   ‚úÖ Cambiado de PostgreSQL a SQLite"
elif grep -q "DATABASE_URL=sqlite" .env; then
    echo "   ‚úÖ Ya configurado para SQLite"
else
    echo "DATABASE_URL=sqlite+aiosqlite:///./app.db" >> .env
    echo "   ‚úÖ Agregada configuraci√≥n SQLite"
fi

# 3. Configurar alembic.ini
echo "üìù 3. Configurando alembic.ini..."
sed -i '' 's|sqlalchemy.url = postgresql://.*|sqlalchemy.url = sqlite:///./app.db|' alembic.ini
echo "   ‚úÖ Alembic configurado para SQLite"

# 4. Limpiar cach√©
echo "üìù 4. Limpiando cach√© de Python..."
find . -name "*.pyc" -delete 2>/dev/null || true
find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
echo "   ‚úÖ Cach√© limpiado"

# 5. Detener servidor existente
echo "üìù 5. Deteniendo servidor existente..."
pkill -f uvicorn 2>/dev/null || true
sleep 2
echo "   ‚úÖ Servidor detenido"

# 6. Verificar configuraci√≥n
echo "üìù 6. Verificando configuraci√≥n..."
echo "   .env DATABASE_URL: $(grep DATABASE_URL .env)"
echo "   alembic.ini: $(grep sqlalchemy.url alembic.ini)"

# 7. Verificar API keys
echo "üìù 7. Verificando API keys..."
if grep -q "tu_api_key" .env; then
    echo "   ‚ö†Ô∏è  ADVERTENCIA: Algunas API keys no est√°n configuradas"
    echo "   üìù Edita .env y completa tus API keys reales"
else
    echo "   ‚úÖ API keys parecen estar configuradas"
fi

# 8. Iniciar servidor
echo "üìù 8. Iniciando servidor en puerto 8001..."
python -m uvicorn app.main:app --reload --port 8001 &
SERVER_PID=$!
echo "   ‚úÖ Servidor iniciado (PID: $SERVER_PID)"

# 9. Esperar y verificar
echo "üìù 9. Verificando funcionamiento..."
sleep 5

# Verificar que el servidor responda
if curl -s http://localhost:8001/ > /dev/null; then
    echo "   ‚úÖ Servidor respondiendo correctamente"
    
    # Verificar productos
    PRODUCTOS=$(curl -s http://localhost:8001/productos/ | jq length 2>/dev/null || echo "0")
    echo "   ‚úÖ Productos disponibles: $PRODUCTOS"
    
    # Verificar chat
    CHAT_STATUS=$(curl -s http://localhost:8001/chat/health | jq -r .status 2>/dev/null || echo "error")
    echo "   ‚úÖ Chat status: $CHAT_STATUS"
    
    echo ""
    echo "üéâ ¬°PROBLEMA RESUELTO!"
    echo "=================================================="
    echo "‚úÖ Backend funcionando en: http://localhost:8001"
    echo "‚úÖ Base de datos: SQLite"
    echo "‚úÖ Productos: $PRODUCTOS disponibles"
    echo "‚úÖ Chat: $CHAT_STATUS"
    echo ""
    echo "El frontend ahora puede conectar sin problemas."
    
else
    echo "   ‚ùå Error: El servidor no responde"
    echo ""
    echo "üö® PROBLEMA NO RESUELTO"
    echo "=================================================="
    echo "Revisa los logs del servidor:"
    echo "tail -f app.log"
    exit 1
fi 